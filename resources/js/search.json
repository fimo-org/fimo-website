[[{"i":"fimo-file-mongo-cli-tools","l":"fimo: File Mongo CLI Tools","p":["fimo is a modular, Rust-based CLI toolkit for high-performance MongoDB workflows — including large-scale imports, streaming sync, and intelligent upserts."]},{"i":"disclaimer","l":"⚠️ Disclaimer","p":["Fimo is an independent open-source project and is not affiliated with MongoDB Inc. MongoDB® and the MongoDB leaf logo are registered trademarks of MongoDB Inc. Use of the MongoDB name does not imply endorsement by MongoDB Inc."]},{"i":"fimo-csv","l":"\uD83D\uDCE5 fimo-csv","p":["fimo-csv is a robust CSV-to-MongoDB loader. It supports:","✅ YAML-based field mappings","✅ Type conversion to BSON (ObjectId, DateTime, Decimal128, etc.)","✅ MiniJinja templating for flexible insert/update/upsert payloads","✅ Batch mode, dry-run, and validate-only options","✅ Custom delimiter, quote, and date format support"]},{"i":"fimo-sync","l":"\uD83D\uDD04 fimo-sync","p":["fimo-sync is a high-performance tool for synchronizing documents between two MongoDB collections. It supports:","✅ Change Stream-based sync with resume token support","✅ Field-based sync(e.g. ObjectId, timestamp, etc.) using $gt comparison","✅ Batch writes for efficiency","✅ Resume file persistence","✅ Support for ObjectId, Date, String, Int64 resume values"]},{"i":"download","l":"\uD83D\uDCE6 Download","p":["You can build from source:","Or install from crates.io:"]},{"i":"-examples","l":"\uD83D\uDEE0 Examples"},{"l":"fimo-csv"},{"i":"fimo-sync-change-stream","l":"fimo-sync (change stream)"},{"i":"fimo-sync-field-based","l":"fimo-sync (field-based)"},{"i":"repository","l":"\uD83D\uDCC1 Repository","p":["Source Code on GitHub","Issues & Contributions","© 2024 fimo.org — Rust ❤️ MongoDB"]}],[{"i":"fimo-csv-file-mongo-csv","l":"fimo-csv (file-mongo-csv)","p":["fimo-csv is a fast and flexible CLI tool written in Rust that imports CSV file into MongoDB documents using YAML-based field mappings and Jinja2-style templating. It's ideal for bulk inserts, updates, and upserts with full control over document structure."]},{"i":"features","l":"\uD83D\uDE80 Features","p":["✅ RFC 4180-compliant CSV parsing (including headers, quoting, escaped quotes)","\uD83D\uDEE0️ Field mapping via YAML configuration","\uD83E\uDDE0 Custom transformation logic using MiniJinja","\uD83D\uDD01 Supports complex templated pipelines for update and upsert operations, enabling aggregation logic and fine-grained control over MongoDB document modifications.","\uD83D\uDCE6 MongoDB insert, update, and upsert support","\uD83E\uDDEA Validate-only and dry-run modes","\uD83D\uDD04 Batch processing support for large files","\uD83D\uDD10 Supports Extended JSON and BSON types","\uD83D\uDD23 Configurable CSV delimiter and quote characters","\uD83D\uDCCA Debug and verbose output for development and testing","\uD83D\uDCC5 NEW: Flexible date parsing with multiple format support (e.g. ISO, MSSQL, Oracle, Go)"]},{"i":"installation","l":"\uD83D\uDCE6 Installation","p":["Or clone and build:"]},{"i":"usage","l":"\uD83D\uDCDD Usage"},{"i":"example-with-templates-and-extended-json","l":"\uD83E\uDDEA Example: With Templates and Extended JSON","p":["\uD83D\uDCC1 data.csv","\uD83E\uDDE9 mapping.yaml","\uD83E\uDDFE templates/upsert.j2","▶️ Run the Import"]},{"i":"example-raw-insert-no-templates","l":"\uD83E\uDDEA Example: Raw Insert (No Templates)","p":["\uD83D\uDCC1 simple.csv","\uD83E\uDDE9 simple.yaml","▶️ Raw Insert Command"]},{"i":"cli-options","l":"\uD83D\uDD27 CLI Options","p":["--batch-size","--collection","--db","--debug","--delimiter","--dry-run","--extended-json","--input","--mapping","--mongo-uri","--no-header","--operation","--quote","--template-dir","--validate-only","CSV delimiter (default:,)","CSV quote character (default:)","Description","Directory with Jinja templates","Enable support for non-JSON BSON values","Enable verbose output","insert, update, or upsert","MongoDB collection name","MongoDB connection URI","MongoDB database name","Number of docs to write in bulk (default: 0)","Option","Path to the CSV file","Path to YAML mapping file","Print documents instead of inserting","Use autogenerated headers col_0, col_1...","Validate rows without writing to MongoDB"]},{"i":"truthy-falsy-mapping-for-booleans","l":"\uD83E\uDDE0 Truthy/Falsy Mapping for Booleans","p":["In mapping.yaml, you can define per-field truthy/falsy values:","This allows more natural mapping from \"yes\"/\"no\", \"Y\"/\"N\" strings into true/false."]},{"i":"flexible-date-parsing-with-custom-formats","l":"\uD83E\uDDE0 Flexible Date Parsing with Custom Formats","p":["Fimo supports parsing date strings using custom formats, giving you the flexibility to import dates from a wide range of sources such as Oracle, MSSQL, or ISO standards.","You can define multiple formats for a date field in your mapping file:","Fimo will try each format in order until one matches. This makes importing data from diverse systems much easier."]},{"i":"example-csv","l":"▶️ Example CSV"},{"i":"corresponding-mapping","l":"▶️ Corresponding Mapping","p":["This feature leverages the chrono crate for robust and standards-compliant date parsing.","ℹ️ You can define multiple formats for a date field in the formats array. If omitted, Fimo defaults to parsing using RFC 3339 (e.g. 2024-01-01T10:00:00Z)."]},{"i":"project-structure","l":"\uD83D\uDCC1 Project Structure"},{"i":"rfc-4180-compatibility","l":"\uD83D\uDCDA RFC 4180 Compatibility","p":["Fimo is fully compatible with RFC 4180:","Comma-separated fields (configurable)","Quoted fields with escape support","Optional headers","Uniform field count (recommended but not enforced)"]},{"i":"disclaimer","l":"⚠️ Disclaimer","p":["fimo-sync is not affiliated with MongoDB Inc. MongoDB® is a registered trademark of MongoDB Inc."]},{"i":"license","l":"\uD83D\uDCDC License","p":["MIT ©"]}],[{"i":"fimo-sync-file-mongo-sync","l":"fimo-sync (file-mongo-sync)","p":["fimo-sync is a flexible and high-performance CLI tool written in Rust for synchronizing documents between two MongoDB collections. It supports both real-time sync via change streams and incremental sync using a chosen field (e.g., _id, date)."]},{"i":"features","l":"\uD83D\uDE80 Features","p":["✅ Sync at the collection level","\uD83D\uDD01 Supports MongoDB Change Streams with resume token support","⏱️ Field-based incremental sync (e.g., date, ObjectId, numeric, string)","\uD83E\uDDE0 Resume file and manual resume value support","\uD83D\uDCE6 Batched writes with upsert logic","\uD83D\uDD10 Full BSON type support (ObjectId, DateTime, Int64, etc.)","\uD83D\uDCC1 Multi-mode resume handling with file or CLI-provided values","\uD83D\uDCDD Optional resume type declaration for correct BSON parsing","\uD83D\uDD04 Compatible with MongoDB 4.0+"]},{"i":"installation","l":"\uD83D\uDCE6 Installation","p":["Or clone and build:"]},{"i":"usage","l":"\uD83D\uDCDD Usage"},{"i":"change-stream-mode","l":"\uD83D\uDD04 Change Stream Mode"},{"i":"field-based-sync-e-g-id-or-timestamp","l":"\uD83D\uDD51 Field-Based Sync (e.g., _id or timestamp)"},{"i":"cli-options","l":"\uD83D\uDD27 CLI Options","p":["--limit","--resume-file","--resume-type","--resume-value","--source-collection","--source-db","--source-uri","--store-resume","--sync-field","--target-collection","--target-db","--target-uri","--use-change-stream","Description","Enable writing resume value/token after sync","Field to use for incremental sync (e.g. _id, date)","File path to persist or read resume token/value","Maximum number of documents per sync batch","MongoDB URI for source cluster","MongoDB URI for target cluster","Option","Resume value to override file or initialize sync","Source collection name","Source database name","Target collection name","Target database name","Type of resume value: objectid, date, int, string","Use MongoDB change stream for real-time sync"]},{"i":"project-structure","l":"\uD83D\uDCC1 Project Structure"},{"i":"disclaimer","l":"⚠️ Disclaimer","p":["fimo-sync is not affiliated with MongoDB Inc. MongoDB® is a registered trademark of MongoDB Inc."]},{"i":"license","l":"\uD83D\uDCDC License","p":["MIT © fimo.org"]}]]